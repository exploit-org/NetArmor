package org.exploit.armor.mitigation.fingerprint;

import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPipeline;
import io.netty.handler.codec.http2.Http2SettingsFrame;
import org.exploit.armor.constant.ChannelScope;
import org.exploit.armor.fingerprint.constant.ResultCode;
import org.exploit.armor.fingerprint.http2.Http2FingerprintPacketHandler;
import org.exploit.armor.mitigation.InboundMitigationHandler;
import org.exploit.armor.provider.NettyServerProvider;
import reactor.core.scheduler.Schedulers;

/**
 * Http2FingerprintHandler
 * Allows to handle HTTP/2 settings frame
 */
public class Http2FingerprintHandler extends InboundMitigationHandler {
    private final Http2FingerprintPacketHandler packetHandler;

    public Http2FingerprintHandler(Http2FingerprintPacketHandler packetHandler) {
        this.packetHandler = packetHandler;
    }

    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        if (!(msg instanceof Http2SettingsFrame frame)) {
            super.channelRead(ctx, msg);
            return;
        }

        packetHandler.handle(ctx, frame.settings())
                .subscribeOn(Schedulers.fromExecutor(ctx.executor()))
                .subscribe(result -> handleResultCode(ctx, msg, result));
    }

    private void handleResultCode(ChannelHandlerContext ctx, Object msg, ResultCode result) {
        if (result == ResultCode.BLOCK) {
            ctx.close();
        } else {
            try {
                super.channelRead(ctx, msg);
            } catch (Exception e) {
                ctx.fireExceptionCaught(e);
            }
        }
    }

    @Override
    public void apply(ChannelScope scope, NettyServerProvider<?> server, ChannelPipeline pipeline) {
        if (scope == ChannelScope.INIT)
            server.addBeforeHttp2Handler(pipeline, packetHandler.name(), this);
    }
}
