package org.exploit.armor.password;

import org.bouncycastle.crypto.generators.SCrypt;
import org.exploit.armor.password.config.SCryptConfig;
import org.exploit.armor.password.constant.EncoderType;
import org.exploit.armor.util.BytesUtil;

import static org.exploit.armor.password.constant.Constant.STRING_FORMAT;

/**
 * SCryptPasswordEncoder
 * Powerful password encoder defined by Colin Percival
 */
public class SCryptPasswordEncoder implements PasswordEncoder {
    private final SCryptConfig config;

    public SCryptPasswordEncoder(SCryptConfig config) {
        this.config = config;
    }

    @Override
    public String encode(CharSequence rawPassword) {
        var salt = BytesUtil.nextBytes(config.saltLength());
        var hash = encode(rawPassword, salt);

        var encodedHash = BytesUtil.base64(hash);
        var encodedSalt = BytesUtil.base64(salt);

        return STRING_FORMAT.formatted(encodedHash, encodedSalt);
    }

    @Override
    public byte[] encode(CharSequence rawPassword, byte[] salt) {
        return SCrypt.generate(
                BytesUtil.charsToBytes(rawPassword), salt,
                config.cost(), config.blockSize(),
                config.parallelism(), config.hashLength()
        );
    }

    @Override
    public EncoderType type() {
        return EncoderType.SCRYPT;
    }
}
