package org.exploit.armor.validator.impl;

import org.exploit.armor.config.SecurityConfig;
import org.exploit.armor.exception.ValidationException;
import org.exploit.armor.validator.InputValidator;

import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

/**
 * DefaultInputValidator
 * Default input validator implementation based on RegEx.
 * <p>
 * Will save you from input attacks.
 * Rules can be defined in the configuration file.
 * <p>
 * @see org.exploit.armor.validator.InputValidator
 */
public class DefaultInputValidator implements InputValidator {
    private final Map<String, Pattern> patternCache = new HashMap<>();

    private final SecurityConfig config;

    public DefaultInputValidator(SecurityConfig config) {
        this.config = config;
    }

    @Override
    public String validate(String rule, String input) {
        var valid = validationPattern(rule).matcher(input)
                .matches();

        if (!valid)
            throw new ValidationException(rule, input);

        return input;
    }

    private Pattern validationPattern(String name) {
        return patternCache.computeIfAbsent(name, key ->
                Pattern.compile(config.pattern(name))
        );
    }
}
